{"version":3,"sources":["table.js","App.js","serviceWorker.js","index.js"],"names":["FormItem","Form","Item","EditableContext","React","createContext","EditableFormRow","create","_ref","form","props","index","Object","objectWithoutProperties","react_default","a","createElement","Provider","value","EditableCell","state","editing","toggleEdit","_this","setState","input","focus","save","e","_this$props","record","handleSave","validateFields","error","values","currentTarget","id","objectSpread","_this2","this","_this$props2","editable","dataIndex","title","restProps","Consumer","style","margin","getFieldDecorator","rules","required","message","concat","initialValue","ref","node","onPressEnter","onBlur","className","paddingRight","onClick","children","Component","EditableTable","_this3","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleDelete","key","dataSource","toConsumableArray","filter","item","handleAdd","_this3$state","count","newData","name","quantity","unit","row","findIndex","splice","columns","render","text","length","popconfirm","onConfirm","href","_this4","_this$state","components","body","cell","map","col","onCell","table","rowClassName","bordered","pagination","es_button","type","marginTop","App","src_table","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8544f26a.chunk.js","sourcesContent":["import React from 'react';\nimport \"antd/dist/antd.css\";\nimport {\n  Table, Input, Button, Popconfirm, Form,\n} from 'antd';\n\nconst FormItem = Form.Item;\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ form, index, ...props }) => (\n  <EditableContext.Provider value={form}>\n    <tr {...props} />\n  </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  state = {\n    editing: false,\n  }\n\n  toggleEdit = () => {\n    const editing = !this.state.editing;\n    this.setState({ editing }, () => {\n      if (editing) {\n        this.input.focus();\n      }\n    });\n  }\n\n  save = (e) => {\n    const { record, handleSave } = this.props;\n    this.form.validateFields((error, values) => {\n      if (error && error[e.currentTarget.id]) {\n        return;\n      }\n      this.toggleEdit();\n      handleSave({ ...record, ...values });\n    });\n  }\n\n  render() {\n    const { editing } = this.state;\n    const {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editable ? (\n          <EditableContext.Consumer>\n            {(form) => {\n              this.form = form;\n              return (\n                editing ? (\n                  <FormItem style={{ margin: 0 }}>\n                    {form.getFieldDecorator(dataIndex, {\n                      rules: [{\n                        required: true,\n                        message: `${title} is required.`,\n                      }],\n                      initialValue: record[dataIndex],\n                    })(\n                      <Input\n                        ref={node => (this.input = node)}\n                        onPressEnter={this.save}\n                        onBlur={this.save}\n                      />\n                    )}\n                  </FormItem>\n                ) : (\n                  <div\n                    className=\"editable-cell-value-wrap\"\n                    style={{ paddingRight: 24 }}\n                    onClick={this.toggleEdit}\n                  >\n                    {restProps.children}\n                  </div>\n                )\n              );\n            }}\n          </EditableContext.Consumer>\n        ) : restProps.children}\n      </td>\n    );\n  }\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [{\n      title: '材料',\n      dataIndex: 'name',\n      editable: true,\n    }, {\n      title: '數量',\n      dataIndex: 'quantity',\n      editable: true,\n    }, {\n      title: '單位',\n      dataIndex: 'unit',\n      editable: true,\n    }, {\n      title: '刪除',\n      dataIndex: 'deletion',\n      render: (text, record) => (\n        this.state.dataSource.length >= 1\n          ? (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\n              <a href=\"javascript:;\">❌</a>\n            </Popconfirm>\n          ) : null\n      ),\n    }];\n\n    this.state = {\n      dataSource: [{\n        key: '0',\n        name: '材料 0',\n        quantity: '100',\n        unit: 'g',\n      }, {\n        key: '1',\n        name: '材料 1',\n        quantity: '100',\n        unit: 'g',\n      }],\n      count: 2,\n      title: '林寶的食譜',\n    };\n  }\n\n  handleDelete = (key) => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\n  }\n\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData = {\n      key: count,\n      name: `材料 ${count}`,\n      quantity: 100,\n      unit: `g`,\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1,\n    });\n  }\n\n  handleSave = (row) => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row,\n    });\n    this.setState({ dataSource: newData });\n  }\n\n  render() {\n    const { dataSource, title } = this.state;\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell,\n      },\n    };\n    const columns = this.columns.map((col) => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave,\n        }),\n      };\n    });\n    return (\n      <div>\n        <Table\n          title={() => title}\n          components={components}\n          rowClassName={() => 'editable-row'}\n          bordered\n          dataSource={dataSource}\n          columns={columns}\n          pagination={false}\n        />\n        <Button onClick={this.handleAdd} type=\"primary\" style={{ marginTop: 16 }}>\n          新增\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default EditableTable;\n","import React from 'react';\nimport EditableTable from './table.js'\nimport \"antd/dist/antd.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EditableTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}